#!/usr/bin/env python


#
# Imports
#
import os
import sys

from bucket.bucket import Bucket
from user.user import User


#
# Error codes
#
from common.__errors__ import ERROR_BUCKET_NOT_EXIST
from common.__errors__ import ERROR_BUCKET_ALREADY_EXISTS
from common.__errors__ import ERROR_REMOVE_BUCKET_NOT_EXIST
from common.__errors__ import ERROR_USER_DOES_NOT_EXIST
from common.__errors__ import SUCCESS


#
# Constants
#
ADD_VALUE       = 'add'
REMOVE_VALUE    = 'remove'


#
# Code
#
class Controller(object):
    """
    Implements all necessary methods to control all operations related to users
    on the system. Each controller instance is associated with one single user,
    that can create or remove one or more buckets.
    """

    def __init__(self):
        """
        Constructor.

        @rtype: None
        @returns: Nothing
        """
        # controller ID
        # TODO: find a better way to calculate this
        self.__controllerID = 0

        # user associated with this controller
        self.__user = None

        # dict of available gold pots
        self.__buckets = {}

        # dict with deleted buckets: allow to recovery them if necessary
        self.__deletedBuckets = {}
    # __init__()

    def addUser(self, data):
        """
        Allows to add a user on the system. This is the first required step.
        Without a user the app can't create/remove buckets.

        @type  data: dict
        @param data: dict with data about the user

        @rtype: basestring
        @returns: the id generated by adding the user on the system. If the user
                  can't added, an empty value is returned.
        """
        # sanity check
        assert isinstance(data, dict)

        # create a user and a controller to handle it
        try:

            # call user constructor
            self.__user = User(data)
            return self.__user.getUserId()

        # system can't create the user: return False
        except (AssertionError, RuntimeError), err:
            sys.stderr.write('Error: %s\n' % str(err))
    # addUser()

    def createBucket(self, name):
        """
        Creates a new bucket instance, with given name.

        @type  name: basestring
        @param name: name of the bucket

        @rtype: tuple
        @returns: tuple with two elements:
            - bool: True if the bucket was created successfully, False otherwise
            - basestring: simple status message
        """
        # sanity check
        assert isinstance(name, str)

        # user does not exist: abort
        if self.__user == None:
            return False, ERROR_USER_DOES_NOT_EXIST

        # user already has a bucket with the given name: abort
        if name in self.__buckets.keys():
            return False, ERROR_BUCKET_ALREADY_EXISTS

        # create a bucket
        bucket = Bucket(name)

        # add created bucket to the dictionary
        self.__buckets[name] = bucket

        return True, SUCCESS
    # createBucket()

    def deleteBucket(self, name):
        """
        Deletes a given bucket.

        @type  name: basestring
        @param name: bucket's name

        @rtype: tuple
        @returns: tuple with two elements:
            - bool: True if the bucket was removed successfully, False otherwise
            - basestring: simple status message
        """
        # sanity check
        assert isinstance(name, str)

        # user does not exist: abort
        if self.__user == None:
            return False, ERROR_USER_DOES_NOT_EXIST

        # user does not have a bucket with the given name: abort
        if name not in self.__buckets.keys():
            return False, ERROR_REMOVE_BUCKET_NOT_EXIST

        # remove bucket from available dictionary
        bucket = self.__buckets.pop(name)

        # store removed bucket on a dict to allow recovery it if necessary
        self.__deletedBuckets[name] = bucket

        return True, SUCCESS
    # deleteBucket()

    def hasUser(self):
        """
        Returns if there is a user configured on the system.

        @rtype: bool
        @returns: True if the user is valid, False otherwise
        """
        return self.__user != None
    # hasUser()

    def listBuckets(self):
        """
        Returns the total of available buckets.

        @rtype: list
        @returns: list of tuples, each one with two elements:
            - basestring: bucket's name
            - float: total available on the bucket
        """
        ret = []

        # run over the available buckets to get the data
        for name, bucket in self.__buckets.items():
            ret.append((name, bucket.total()))

        return ret
    # listBuckets

# Controller
